package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"lab/graphApiForServices/graph/model"
	"strconv"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	p := r.Cli.CreateProduct(input.Name, float64(input.Price), input.Code)
	return &model.Product{Name: p.Name, Price: int(p.Price), Code: p.Code, ID: fmt.Sprint(p.Id)}, nil
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	or := r.Cli.CreateOrder(input.Code, float64(input.Price), input.Name, input.Total)
	return &model.Order{Code: or.Code, Name: or.Name, Total: int(or.Total), Price: int(or.Price), ID: or.Id}, nil
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, code string) (*model.Product, error) {
	p := r.Cli.GetProductRest(code)
	return &model.Product{Name: p.Name, Price: int(p.Price), Code: p.Code, ID: strconv.Itoa(p.Id)}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
